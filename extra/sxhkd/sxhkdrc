#
# === wm independent hotkeys ===
#

# terminal emulator
super + r
	SHLVL=0 gnome-terminal

# terminal emulator (git)
super + g
	SHLVL=0 gnome-terminal -x bash --rcfile ~/bin/git-preload

# file manager
super + e
	SHLVL=0 nemo

# editor
super + apostrophe
	SHLVL=0 gnome-terminal -- nvim

# program launcher
super + {_, alt + }@space
	SHLVL=0 rofi -show {drun,run}

alt + F2
	SHLVL=0 rofi -show run

# program launcher (root)
ctrl + super + {_, alt + }@space
	SHLVL=0 tmux -c 'rofi -dmenu -p "password for $USER: " -password -lines 0 | sudo -S rofi -show {drun,run} & disown'

# make sxhkd reload its configuration files:
super + Escape
	pkill -USR1 -x sxhkd

# screenshot
{_,alt + , shift + } {_,ctrl + }Print
	pkill -x xfce4-screensho || xfce4-screenshooter {-f,-w,-r} {_,-o 'xclip -i -t image/png -selection clipboard'}

# text to image
super + x
	xctxt2png

# image to text
super + shift + x
	xcpng2txt

# rotate monitor
super + alt + {bracketright,shift + bracketleft,bracketleft,shift + bracketright}
	xrandr -o {left,inverted,normal,right}

# lock screen
super + alt + l
	which xfce4-screensaver-command && xfce4-screensaver-command -l || \
	which xscreensaver-command && xscreensaver-command -lock

#
# volume
#

# audio
super + shift + KP_{Add,Subtract}
	values=$(amixer -D pulse get Master | grep --line-buffered "\(Mono\:\|Front \(Left\|Right\)\:\) Playback" | sed -e 's/^.*\[\(.*\)%\].*$/\1/'); \
	s=$(echo "$values" | sort -rn | head -n 1); \
	ns=$((s {+,-} 5)); \
	[ "$ns" -gt 120 ] && ns=120; \
	[ "$ns" -lt 0 ] && ns=0; \
	nvalues=$(for i in $values; do [ "$s" -gt 0 ] \
		&& echo $(( $i * $ns / $s ))% || echo $ns%; done); \
	pactl -- set-sink-volume @DEFAULT_SINK@ $nvalues; \
	(rofi -e "$nvalues" -width 4 & (sleep .2; kill $!) &)

{XF86AudioRaiseVolume,XF86AudioLowerVolume}
	values=$(amixer -D pulse get Master | grep --line-buffered "\(Mono\:\|Front \(Left\|Right\)\:\) Playback" | sed -e 's/^.*\[\(.*\)%\].*$/\1/'); \
	s=$(echo "$values" | sort -rn | head -n 1); \
	ns=$((s {+,-} 5)); \
	[ "$ns" -gt 120 ] && ns=120; \
	[ "$ns" -lt 0 ] && ns=0; \
	nvalues=$(for i in $values; do [ "$s" -gt 0 ] \
		&& echo $(( $i * $ns / $s ))% || echo $ns%; done); \
	pactl -- set-sink-volume @DEFAULT_SINK@ $nvalues; \
	(rofi -e "$nvalues" -width 4 & (sleep .2; kill $!) &)

# select player to control
super + shift + m
	p=$(player.sh -l | rofi -dmenu); \
	[ -n "$p" ] && player.sh -S "$p"

# play/pause
super + shift + KP_Enter
	player.sh -c PlayPause

# pause
super + shift + KP_Decimal
	player.sh -c Pause

# previous/next
super + shift + {Up,Down}
	player.sh -c {Previous,Next}

# 5/1s back/forward
super + shift {_,+ ctrl} + {Left,Right}
	d={5,1};player.sh -c Seek {-,+}$d"000000"

# launch player
super + m
	SHLVL=0 clementine

# toggle mic
super + shift + slash
	toggleMicWithIcon.sh

#
# === bspwm hotkeys ===
#

# quit/restart bspwm
super + alt + {q,r}
	bspc {quit,wm -r}

# close and kill
alt + {_,shift + }F4
	bspc node -{c,k}

# alternate between the tiled and monocle layout
super + Return
	bspc desktop -l next

# toggle focus following mouse
super + ctrl + f
	bspc config focus_follows_pointer {true,false}

# send the current node to the preselected last node
super + F10
	bspc node -n last.!automatic.local

# send the newest marked node to the newest preselected node
super + shift + F10
	bspc node newest.marked.local -n newest.!automatic.local

# swap the current node and the biggest node
super + F9
	bspc node -s biggest

#
# state/flags
#

# set the window state
alt + {F5,shift + F5,shift + F11,F11}
	bspc node -t {tiled,pseudo_tiled,floating,fullscreen}

# set the node flags
super + ctrl + {m,x,y,z}
	bspc node -g {marked,locked,sticky,private}
alt + F6
	bspc node -t tiled \
	|| [ $(bspc query -T -d | jq -r '.layout') = tiled ] \
	&& bspc node -s older.local.!floating; \
	bspc node older.local.!floating -f
alt + shift + F6
	bspc node -t {tiled,pseudo_tiled,floating,fullscreen}

# send to background & hide
super + F6
	w=$(bspc query -N -n focused.local.!below); \
	if [ -n "$w" ]; then \
		bspc node $w.tiled -t fullscreen; \
		bspc node $w -l below; \
		bspc node $w -g hidden=on; \
	fi
super + {_,ctrl + }shift + F6
	w=$(bspc query -N -n .hidden.local.below | while read i; \ 
		do echo $i $(xprop -id $i | fgrep NET_WM_NAME | \
		sed 's/^[^=]* = //'); done | {head -n 1,rofi -dmenu}); \
	if [ -n "$w" ]; then \
		w=$(echo $w | cut -d ' ' -s -f 1); \
		bspc node "$w" -g hidden=off; \
		bspc node $w.fullscreen -t tiled; \
		bspc node $w -l normal; \
		bspc node -f $w; \
	fi

# hide background windows
super + F7
	for i in $(bspc query -N -n .below.local); do \
		bspc node "$i" -g hidden=on; \
	done

# show hidden windows
super + shift + F7
	for i in $(bspc query -N -n .hidden.local); do \
		bspc node "$i" -g hidden=off; \
	done

# toggle above
super + F5
	bspc node focused.normal -l above || \
	bspc node focused.above -l normal

# revert above for this desktop
super + shift + F5
	for w in $(bspc query -N -n .above.local); do \
		bspc node "$w" -l normal; \
	done

#
# focus/swap
#

# focus the node in the given direction
super + {_,shift + }{h,j,k,l}
	bspc node -{f,s} {west,south,north,east}

# focus the node for the given path jump
super + {bracketleft,bracketright,shift + bracketleft,shift + bracketright}
	bspc node -f @{first,second,parent,brother}

# focus the next/previous node in the current desktop
alt + {_,shift + }Tab
	bspc node -f {next,prev}.local

# focus the next/previous desktop in the current monitor
super + alt + {Left,Right}
	bspc desktop -f {prev,next}.local
super + alt + {Up,Down}
	a={next,prev}.local; \
	bspc desktop -f $a'#'$a

# move and focus desktop
super + alt + shift + {Left,Right}
	d=$(bspc query -D -d {prev,next}.local); \
	n=$(bspc query -N -n); \
	bspc node -d $d; \
	bspc desktop -f $d; \
	bspc node -f $n
super + alt + shift + {Up,Down}
	a={next,prev}.local; \
	d=$(bspc query -D -d $a'#'$a); \
	n=$(bspc query -N -n); \
	bspc node -d $d; \
	bspc desktop -f $d; \
	bspc node -f $n

# focus the last node/desktop
super + {grave,Tab}
	bspc {node,desktop} -f last.local

# focus the older or newer node in the focus history
super + {o,i}
	bspc wm -h off; \
	bspc node {older,newer} -f; \
	bspc wm -h on

# focus or send to the given desktop
super + {_,shift + }{1-9,0}
	bspc {desktop -f,node -d} '^{1-9,10}'

# choose window to focus
super + F3
	w=$(bspc query -N -n .local.window | while read i; \ 
		do echo $i $(xprop -id $i | fgrep NET_WM_NAME | \
		sed 's/^[^=]* = //'); done | rofi -dmenu); \
	if [ -n "$w" ]; then \
		w=$(echo $w | cut -d ' ' -s -f 1); \
		bspc node -f $w; \
	fi

#
# preselect
#

# preselect the direction
super + p; super + {h,j,k,l}
	bspc node -p {west,south,north,east}

# preselect the ratio
super + p; super + {1-9}
	bspc node -o 0.{1-9}

# cancel the preselection for the focused node
super + p; super + p
	bspc node -p cancel

# cancel the preselection for the focused desktop
super + p; super + shift + p
	bspc query -N -d | xargs -I id -n 1 bspc node id -p cancel

#
# move/resize
#

# expand a window by moving one of its side outward
super + ctrl + {h,j,k,l}
	bspc node -z {left -20 0,bottom 0 20,top 0 -20,right 20 0}
alt + F8: {h,j,k,l}
	bspc node -z {left -20 0,bottom 0 20,top 0 -20,right 20 0}

# contract a window by moving one of its side inward
super + ctrl + shift + {h,j,k,l}
	bspc node -z {right -20 0,top 0 20,bottom 0 -20,left 20 0}
alt + F8: shift + {h,j,k,l}
	bspc node -z {right -20 0,top 0 20,bottom 0 -20,left 20 0}

# move a floating window
super + {Left,Down,Up,Right}
	bspc node -v {-20 0,0 20,0 -20,20 0}
alt + F7: {h,j,k,l}
	bspc node -v {-20 0,0 20,0 -20,20 0}

# exit move/resize mode
alt + {F7,F8}: {space, Return}
	xdotool key Escape

#change parent ratio
super + alt + {equal,minus}
	bspc node @parent -r {+,-}0.0588

#swap size with brother
super + z
	bspc node @parent -R 180; \
	bspc node -s @brother; \
	bspc node @brother -R 180; \
	bspc node -R 180

# rotate parent
super {_,+ shift} + f
	bspc node @parent -R {180,90}

#
# compton keys
#

# window opacity
super + shift + {plus,minus}
	w=$(bspc query -N -n); \
	o=$(compton-trans -w $w -g); \
	{no=$(($o + 10)),no=$(($o - 10))}; \
	(($no < 20)) && no=20; \
	compton-trans -w $w -o $no

# invert colors
super + alt + i
	w=$(bspc query -N -n); \
	s=$(xprop -id $w | grep '^_COMPTON_INVERT(CARDINAL) = ' | sed -e 's/^.*=\s\([0-9]*\)$/\1/'); \
	if [ 0$s -eq 0 ]; then \
		xprop -id $w -format _COMPTON_INVERT 8c -set _COMPTON_INVERT 1; \
	else \
		xprop -id $w -format _COMPTON_INVERT 8c -set _COMPTON_INVERT 0; \
	fi
